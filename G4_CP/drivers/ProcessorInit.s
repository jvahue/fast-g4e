;**********************************************************************
;* Initialisation Code for ColdFire MCF5485 Processor                 *
;**********************************************************************
; Generated by ColdFire Initialisation Utility 2.10.7
; Tue Sep 11 13:18:58 2007
;  
; MicroAPL Ltd makes no warranties in respect of the suitability
; of this code for any particular purpose, and accepts
; no liability for any loss arising out of its use. The person or 
; persons making use of this file must make the final evaluation
; as to its suitability and correctness for a particular application.
;  
;**********************************************************************
; Copyright (C) 2010-2011 Pratt & Whitney Engine Services, Inc. 
; Altair Engine Diagnostic Solutions
; All Rights Reserved. Proprietary and Confidential.
;               
; File:     ProcessorInit.s
; 
;* Version
;* $Revision: 20 $  $Date: 8/24/11 2:45p $
;
;
;**********************************************************************
; Input clock frequency is 25.00 MHz (CLKIN), also used for PCI and FlexBus
; Clock Ratio 1:4
; Internal XLB and SDRAM Bus Frequency is 100.00 MHz
; Core Frequency is 200.00 MHz
;**********************************************************************

ENABLE_DATA_CACHE   .equ    0   ; Note: if enabled, data cache flush needs implementing
ENABLE_CACHE_PUSH   .equ    0   ; Note: CPUSHL loop is slow (500us) and currently disabled.

; Base address of MBAR peripherals area
MBAR_BASE:    .equ  0x80000000

; Memory-mapped registers within MBAR peripherals area
SDRAMDS:      .equ  MBAR_BASE+0x00000004           ; SDRAM Drive Strength Register
CS0CFG:       .equ  MBAR_BASE+0x00000020           ; SDRAM Chip Select Configuration Register 0
CS1CFG:       .equ  MBAR_BASE+0x00000024           ; SDRAM Chip Select Configuration Register 1
CS2CFG:       .equ  MBAR_BASE+0x00000028           ; SDRAM Chip Select Configuration Register 2
CS3CFG:       .equ  MBAR_BASE+0x0000002c           ; SDRAM Chip Select Configuration Register 3
SDMR:         .equ  MBAR_BASE+0x00000100           ; SDRAM Mode/Extended Mode Register
SDCR:         .equ  MBAR_BASE+0x00000104           ; SDRAM Control Register
SDCFG1:       .equ  MBAR_BASE+0x00000108           ; SDRAM Configuration Register 1
SDCFG2:       .equ  MBAR_BASE+0x0000010c           ; SDRAM Configuration Register 2
SPCR:         .equ  MBAR_BASE+0x00000300           ; System PLL Control Register
CSAR0:        .equ  MBAR_BASE+0x00000500           ; Chip-Select Address Register 0
CSMR0:        .equ  MBAR_BASE+0x00000504           ; Chip-Select Mask Register 0
CSCR0:        .equ  MBAR_BASE+0x00000508           ; Chip-Select Control Register 0
CSAR1:        .equ  MBAR_BASE+0x0000050c           ; Chip-Select Address Register 1
CSMR1:        .equ  MBAR_BASE+0x00000510           ; Chip-Select Mask Register 1
CSCR1:        .equ  MBAR_BASE+0x00000514           ; Chip-Select Control Register 1
CSAR2:        .equ  MBAR_BASE+0x00000518           ; Chip-Select Address Register 2
CSMR2:        .equ  MBAR_BASE+0x0000051c           ; Chip-Select Mask Register 2
CSCR2:        .equ  MBAR_BASE+0x00000520           ; Chip-Select Control Register 2
CSAR3:        .equ  MBAR_BASE+0x00000524           ; Chip-Select Address Register 3
CSMR3:        .equ  MBAR_BASE+0x00000528           ; Chip-Select Mask Register 3
CSCR3:        .equ  MBAR_BASE+0x0000052c           ; Chip-Select Control Register 3
CSAR4:        .equ  MBAR_BASE+0x00000530           ; Chip-Select Address Register 4
CSMR4:        .equ  MBAR_BASE+0x00000534           ; Chip-Select Mask Register 4
CSCR4:        .equ  MBAR_BASE+0x00000538           ; Chip-Select Control Register 4
CSAR5:        .equ  MBAR_BASE+0x0000053c           ; Chip-Select Address Register 5
CSMR5:        .equ  MBAR_BASE+0x00000540           ; Chip-Select Mask Register 5
CSCR5:        .equ  MBAR_BASE+0x00000544           ; Chip-Select Control Register 5
IMRH:         .equ  MBAR_BASE+0x00000708           ; Interrupt Mask Register
IMRL:         .equ  MBAR_BASE+0x0000070c           ; Interrupt Mask Register
ICR001:       .equ  MBAR_BASE+0x00000741           ; Interrupt Control Register
ICR002:       .equ  MBAR_BASE+0x00000742           ; Interrupt Control Register
ICR003:       .equ  MBAR_BASE+0x00000743           ; Interrupt Control Register
ICR004:       .equ  MBAR_BASE+0x00000744           ; Interrupt Control Register
ICR005:       .equ  MBAR_BASE+0x00000745           ; Interrupt Control Register
ICR006:       .equ  MBAR_BASE+0x00000746           ; Interrupt Control Register
ICR007:       .equ  MBAR_BASE+0x00000747           ; Interrupt Control Register
ICR015:       .equ  MBAR_BASE+0x0000074f           ; Interrupt Control Register
ICR016:       .equ  MBAR_BASE+0x00000750           ; Interrupt Control Register
ICR017:       .equ  MBAR_BASE+0x00000751           ; Interrupt Control Register
ICR018:       .equ  MBAR_BASE+0x00000752           ; Interrupt Control Register
ICR019:       .equ  MBAR_BASE+0x00000753           ; Interrupt Control Register
ICR020:       .equ  MBAR_BASE+0x00000754           ; Interrupt Control Register
ICR021:       .equ  MBAR_BASE+0x00000755           ; Interrupt Control Register
ICR022:       .equ  MBAR_BASE+0x00000756           ; Interrupt Control Register
ICR023:       .equ  MBAR_BASE+0x00000757           ; Interrupt Control Register
ICR024:       .equ  MBAR_BASE+0x00000758           ; Interrupt Control Register
ICR025:       .equ  MBAR_BASE+0x00000759           ; Interrupt Control Register
ICR026:       .equ  MBAR_BASE+0x0000075a           ; Interrupt Control Register
ICR027:       .equ  MBAR_BASE+0x0000075b           ; Interrupt Control Register
ICR028:       .equ  MBAR_BASE+0x0000075c           ; Interrupt Control Register
ICR029:       .equ  MBAR_BASE+0x0000075d           ; Interrupt Control Register
ICR030:       .equ  MBAR_BASE+0x0000075e           ; Interrupt Control Register
ICR031:       .equ  MBAR_BASE+0x0000075f           ; Interrupt Control Register
ICR032:       .equ  MBAR_BASE+0x00000760           ; Interrupt Control Register
ICR033:       .equ  MBAR_BASE+0x00000761           ; Interrupt Control Register
ICR034:       .equ  MBAR_BASE+0x00000762           ; Interrupt Control Register
ICR035:       .equ  MBAR_BASE+0x00000763           ; Interrupt Control Register
ICR036:       .equ  MBAR_BASE+0x00000764           ; Interrupt Control Register
ICR037:       .equ  MBAR_BASE+0x00000765           ; Interrupt Control Register
ICR038:       .equ  MBAR_BASE+0x00000766           ; Interrupt Control Register
ICR039:       .equ  MBAR_BASE+0x00000767           ; Interrupt Control Register
ICR040:       .equ  MBAR_BASE+0x00000768           ; Interrupt Control Register
ICR041:       .equ  MBAR_BASE+0x00000769           ; Interrupt Control Register
ICR042:       .equ  MBAR_BASE+0x0000076a           ; Interrupt Control Register
ICR043:       .equ  MBAR_BASE+0x0000076b           ; Interrupt Control Register
ICR047:       .equ  MBAR_BASE+0x0000076f           ; Interrupt Control Register
ICR048:       .equ  MBAR_BASE+0x00000770           ; Interrupt Control Register
ICR049:       .equ  MBAR_BASE+0x00000771           ; Interrupt Control Register
ICR050:       .equ  MBAR_BASE+0x00000772           ; Interrupt Control Register
ICR051:       .equ  MBAR_BASE+0x00000773           ; Interrupt Control Register
ICR052:       .equ  MBAR_BASE+0x00000774           ; Interrupt Control Register
ICR053:       .equ  MBAR_BASE+0x00000775           ; Interrupt Control Register
ICR054:       .equ  MBAR_BASE+0x00000776           ; Interrupt Control Register
ICR055:       .equ  MBAR_BASE+0x00000777           ; Interrupt Control Register
ICR056:       .equ  MBAR_BASE+0x00000778           ; Interrupt Control Register
ICR057:       .equ  MBAR_BASE+0x00000779           ; Interrupt Control Register
ICR058:       .equ  MBAR_BASE+0x0000077a           ; Interrupt Control Register
ICR059:       .equ  MBAR_BASE+0x0000077b           ; Interrupt Control Register
ICR060:       .equ  MBAR_BASE+0x0000077c           ; Interrupt Control Register
ICR061:       .equ  MBAR_BASE+0x0000077d           ; Interrupt Control Register
ICR062:       .equ  MBAR_BASE+0x0000077e           ; Interrupt Control Register
GMS0:         .equ  MBAR_BASE+0x00000800           ; GPT 0 Enable and Mode Select Register
GCIR0:        .equ  MBAR_BASE+0x00000804           ; GPT 0 Counter Input Register
GPWM0:        .equ  MBAR_BASE+0x00000808           ; GPT 0 PWM Configuration Register
GMS1:         .equ  MBAR_BASE+0x00000810           ; GPT 1 Enable and Mode Select Register
GCIR1:        .equ  MBAR_BASE+0x00000814           ; GPT 1 Counter Input Register
GPWM1:        .equ  MBAR_BASE+0x00000818           ; GPT 1 PWM Configuration Register
GMS2:         .equ  MBAR_BASE+0x00000820           ; GPT 2 Enable and Mode Select Register
GCIR2:        .equ  MBAR_BASE+0x00000824           ; GPT 2 Counter Input Register
GPWM2:        .equ  MBAR_BASE+0x00000828           ; GPT 2 PWM Configuration Register
GMS3:         .equ  MBAR_BASE+0x00000830           ; GPT 3 Enable and Mode Select Register
GCIR3:        .equ  MBAR_BASE+0x00000834           ; GPT 3 Counter Input Register
GPWM3:        .equ  MBAR_BASE+0x00000838           ; GPT 3 PWM Configuration Register
STCNT0:       .equ  MBAR_BASE+0x00000900           ; SLT 0 Terminal Count Register
SCR0:         .equ  MBAR_BASE+0x00000904           ; SLT 0 Control Register
STCNT1:       .equ  MBAR_BASE+0x00000910           ; SLT 1 Terminal Count Register
SCR1:         .equ  MBAR_BASE+0x00000914           ; SLT 1 Control Register
PDDR_FBCTL:   .equ  MBAR_BASE+0x00000a10           ; Port FBCTL Data Direction Register
PDDR_FBCS:    .equ  MBAR_BASE+0x00000a11           ; Port FBCS Data Direction Register
PDDR_DMA:     .equ  MBAR_BASE+0x00000a12           ; Port DMA Data Direction Register
PDDR_FEC0H:   .equ  MBAR_BASE+0x00000a14           ; Port FEC0H Data Direction Register
PDDR_FEC0L:   .equ  MBAR_BASE+0x00000a15           ; Port FEC0L Data Direction Register
PDDR_FEC1H:   .equ  MBAR_BASE+0x00000a16           ; Port FEC1H Data Direction Register
PDDR_FEC1L:   .equ  MBAR_BASE+0x00000a17           ; Port FEC1L Data Direction Register
PDDR_FECI2C:  .equ  MBAR_BASE+0x00000a18           ; Port FECI2C Data Direction Register
PDDR_PCIBG:   .equ  MBAR_BASE+0x00000a19           ; Port PCIBG Data Direction Register
PDDR_PCIBR:   .equ  MBAR_BASE+0x00000a1a           ; Port PCIBR Data Direction Register
PDDR_PSC3PSC2: .equ  MBAR_BASE+0x00000a1c          ; Port PSC3PSC2 Data Direction Register
PDDR_PSC1PSC0: .equ  MBAR_BASE+0x00000a1d          ; Port PSC1PSC0 Data Direction Register
PDDR_DSPI:    .equ  MBAR_BASE+0x00000a1e           ; Port DSPI Data Direction Register
PAR_FBCTL:    .equ  MBAR_BASE+0x00000a40           ; FlexBus Control Pin Assignment Register
PAR_FBCS:     .equ  MBAR_BASE+0x00000a42           ; FlexBus Chip Select Pin Assignment Register
PAR_DMA:      .equ  MBAR_BASE+0x00000a43           ; DMA Pin Assignment Register
PAR_FECI2CIRQ: .equ  MBAR_BASE+0x00000a44          ; FEC/I2C/IRQ Pin Assignment Register
PAR_PCIBG:    .equ  MBAR_BASE+0x00000a48           ; PCI Grant Pin Assignment Register
PAR_PCIBR:    .equ  MBAR_BASE+0x00000a4a           ; PCI Request Pin Assignment Register
PAR_PSC3:     .equ  MBAR_BASE+0x00000a4c           ; PSC3 Pin Assignment Register
PAR_PSC2:     .equ  MBAR_BASE+0x00000a4d           ; PSC2 Pin Assignment Register
PAR_PSC1:     .equ  MBAR_BASE+0x00000a4e           ; PSC1 Pin Assignment Register
PAR_PSC0:     .equ  MBAR_BASE+0x00000a4f           ; PSC0 Pin Assignment Register
PAR_DSPI:     .equ  MBAR_BASE+0x00000a50           ; DSPI Pin Assignment Register
PAR_TIMER:    .equ  MBAR_BASE+0x00000a52           ; General Purpose Timer Pin Assignment Register
PCISCR:       .equ  MBAR_BASE+0x00000b04           ; PCI Status/Command Register
PCICR1:       .equ  MBAR_BASE+0x00000b0c           ; PCI Configuration 1 Register
PCIBAR0:      .equ  MBAR_BASE+0x00000b10           ; PCI Base Address Register 0
PCIBAR1:      .equ  MBAR_BASE+0x00000b14           ; PCI Base Address Register 1
PCISIDR:      .equ  MBAR_BASE+0x00000b2c           ; <BASENAME>PCISID</BASENAME>PCI Subsystem ID Register
PCICR2:       .equ  MBAR_BASE+0x00000b3c           ; PCI Configuration Register 2
PCIGSCR:      .equ  MBAR_BASE+0x00000b60           ; PCI Global Status/Control Register
PCITBATR0:    .equ  MBAR_BASE+0x00000b64           ; PCI Target Base Address Translation Register 0
PCITBATR1:    .equ  MBAR_BASE+0x00000b68           ; PCI Target Base Address Translation Register 1
PCITCR:       .equ  MBAR_BASE+0x00000b6c           ; PCI Target Control Register
PCIIW0BTAR:   .equ  MBAR_BASE+0x00000b70           ; PCI Initiator Window 0 Base/Translation Address Register
PCIIW1BTAR:   .equ  MBAR_BASE+0x00000b74           ; PCI Initiator Window 1 Base/Translation Address Register
PCIIW2BTAR:   .equ  MBAR_BASE+0x00000b78           ; PCI Initiator Window 2 Base/Translation Address Register
PCIIWCR:      .equ  MBAR_BASE+0x00000b80           ; PCI Initiator Window Configuration Register
PCIICR:       .equ  MBAR_BASE+0x00000b84           ; PCI Initiator Control Register
PACR:         .equ  MBAR_BASE+0x00000c00           ; PCI Arbiter Control Register
EPPAR:        .equ  MBAR_BASE+0x00000f00           ; EPORT Pin Assignment Register
EPDDR:        .equ  MBAR_BASE+0x00000f04           ; EPORT Data Direction Register
EPIER:        .equ  MBAR_BASE+0x00000f05           ; EPORT Interrupt Enable Register
CTCR0:        .equ  MBAR_BASE+0x00007f00           ; Comm Timer Configuration Register 0
CTCR1:        .equ  MBAR_BASE+0x00007f04           ; Comm Timer Configuration Register 1
CTCR2:        .equ  MBAR_BASE+0x00007f08           ; Comm Timer Configuration Register 2
CTCR3:        .equ  MBAR_BASE+0x00007f0c           ; Comm Timer Configuration Register 3
CTCR4:        .equ  MBAR_BASE+0x00007f10           ; Comm Timer Configuration Register 4
CTCR5:        .equ  MBAR_BASE+0x00007f14           ; Comm Timer Configuration Register 5
CTCR6:        .equ  MBAR_BASE+0x00007f18           ; Comm Timer Configuration Register 6
CTCR7:        .equ  MBAR_BASE+0x00007f1c           ; Comm Timer Configuration Register 7
PCITTCR:      .equ  MBAR_BASE+0x00008408           ; PCI Tx Transaction Control Register
PCITER:       .equ  MBAR_BASE+0x0000840c           ; PCI Tx Enables Register
PCITFCR:      .equ  MBAR_BASE+0x00008448           ; PCI Tx FIFO Control Register
PCITFAR:      .equ  MBAR_BASE+0x0000844c           ; PCI Tx FIFO Alarm Register
PCIRTCR:      .equ  MBAR_BASE+0x00008488           ; PCI Rx Transaction Control Register
PCIRER:       .equ  MBAR_BASE+0x0000848c           ; PCI Rx Enables Register
PCIRFCR:      .equ  MBAR_BASE+0x000084c8           ; PCI Rx FIFO Control Register
PCIRFAR:      .equ  MBAR_BASE+0x000084cc           ; PCI Rx FIFO Alarm Register
PSCMR10:      .equ  MBAR_BASE+0x00008600           ; PSC0 Mode Register 1
PSCMR20:      .equ  MBAR_BASE+0x00008600           ; PSC0 Mode Register 2
PSCCSR0:      .equ  MBAR_BASE+0x00008604           ; PSC0 Clock Select Register
PSCCR0:       .equ  MBAR_BASE+0x00008608           ; PSC0 Command Register
PSCACR0:      .equ  MBAR_BASE+0x00008610           ; PSC0 Auxiliary Control Register
PSCIMR0:      .equ  MBAR_BASE+0x00008614           ; PSC0 Interrupt Mask Register
PSCCTUR0:     .equ  MBAR_BASE+0x00008618           ; PSC0 Counter Timer Upper Register
PSCCTLR0:     .equ  MBAR_BASE+0x0000861c           ; PSC0 Counter Timer Lower Register
PSCSICR0:     .equ  MBAR_BASE+0x00008640           ; PSC0 Control Register
PSCIRCR10:    .equ  MBAR_BASE+0x00008644           ; PSC0 Infrared Control Register 1
PSCIRCR20:    .equ  MBAR_BASE+0x00008648           ; PSC0 Infrared Control Register 2
PSCIRSDR0:    .equ  MBAR_BASE+0x0000864c           ; PSC0 Infrared SIR Divide Register
PSCIRMDR0:    .equ  MBAR_BASE+0x00008650           ; PSC0 Infrared MIR Divide Register
PSCIRFDR0:    .equ  MBAR_BASE+0x00008654           ; PSC0 Infrared FIR Divide Register
PSCRFCR0:     .equ  MBAR_BASE+0x00008668           ; PSC0 RxFIFO Control Register
PSCRFAR0:     .equ  MBAR_BASE+0x0000866e           ; PSC 0 RxFIFO AlarmRegister
PSCTFCR0:     .equ  MBAR_BASE+0x00008688           ; PSC0 TxFIFO Control Register
PSCTFAR0:     .equ  MBAR_BASE+0x0000868e           ; PSC 0 TxFIFO AlarmRegister
PSCMR11:      .equ  MBAR_BASE+0x00008700           ; PSC1 Mode Register 1
PSCMR21:      .equ  MBAR_BASE+0x00008700           ; PSC1 Mode Register 2
PSCCSR1:      .equ  MBAR_BASE+0x00008704           ; PSC1 Clock Select Register
PSCCR1:       .equ  MBAR_BASE+0x00008708           ; PSC1 Command Register
PSCACR1:      .equ  MBAR_BASE+0x00008710           ; PSC1 Auxiliary Control Register
PSCIMR1:      .equ  MBAR_BASE+0x00008714           ; PSC1 Interrupt Mask Register
PSCCTUR1:     .equ  MBAR_BASE+0x00008718           ; PSC1 Counter Timer Upper Register
PSCCTLR1:     .equ  MBAR_BASE+0x0000871c           ; PSC1 Counter Timer Lower Register
PSCSICR1:     .equ  MBAR_BASE+0x00008740           ; PSC1 Control Register
PSCIRCR11:    .equ  MBAR_BASE+0x00008744           ; PSC1 Infrared Control Register 1
PSCIRCR21:    .equ  MBAR_BASE+0x00008748           ; PSC1 Infrared Control Register 2
PSCIRSDR1:    .equ  MBAR_BASE+0x0000874c           ; PSC1 Infrared SIR Divide Register
PSCIRMDR1:    .equ  MBAR_BASE+0x00008750           ; PSC1 Infrared MIR Divide Register
PSCIRFDR1:    .equ  MBAR_BASE+0x00008754           ; PSC1 Infrared FIR Divide Register
PSCRFCR1:     .equ  MBAR_BASE+0x00008768           ; PSC1 RxFIFO Control Register
PSCRFAR1:     .equ  MBAR_BASE+0x0000876e           ; PSC 1 RxFIFO AlarmRegister
PSCTFCR1:     .equ  MBAR_BASE+0x00008788           ; PSC1 TxFIFO Control Register
PSCTFAR1:     .equ  MBAR_BASE+0x0000878e           ; PSC 1 TxFIFO AlarmRegister
PSCMR12:      .equ  MBAR_BASE+0x00008800           ; PSC2 Mode Register 1
PSCMR22:      .equ  MBAR_BASE+0x00008800           ; PSC2 Mode Register 2
PSCCSR2:      .equ  MBAR_BASE+0x00008804           ; PSC2 Clock Select Register
PSCCR2:       .equ  MBAR_BASE+0x00008808           ; PSC2 Command Register
PSCACR2:      .equ  MBAR_BASE+0x00008810           ; PSC2 Auxiliary Control Register
PSCIMR2:      .equ  MBAR_BASE+0x00008814           ; PSC2 Interrupt Mask Register
PSCCTUR2:     .equ  MBAR_BASE+0x00008818           ; PSC2 Counter Timer Upper Register
PSCCTLR2:     .equ  MBAR_BASE+0x0000881c           ; PSC2 Counter Timer Lower Register
PSCSICR2:     .equ  MBAR_BASE+0x00008840           ; PSC2 Control Register
PSCIRCR12:    .equ  MBAR_BASE+0x00008844           ; PSC2 Infrared Control Register 1
PSCIRCR22:    .equ  MBAR_BASE+0x00008848           ; PSC2 Infrared Control Register 2
PSCIRSDR2:    .equ  MBAR_BASE+0x0000884c           ; PSC2 Infrared SIR Divide Register
PSCIRMDR2:    .equ  MBAR_BASE+0x00008850           ; PSC2 Infrared MIR Divide Register
PSCIRFDR2:    .equ  MBAR_BASE+0x00008854           ; PSC2 Infrared FIR Divide Register
PSCRFCR2:     .equ  MBAR_BASE+0x00008868           ; PSC2 RxFIFO Control Register
PSCRFAR2:     .equ  MBAR_BASE+0x0000886e           ; PSC 2 RxFIFO AlarmRegister
PSCTFCR2:     .equ  MBAR_BASE+0x00008888           ; PSC2 TxFIFO Control Register
PSCTFAR2:     .equ  MBAR_BASE+0x0000888e           ; PSC 2 TxFIFO AlarmRegister
PSCMR13:      .equ  MBAR_BASE+0x00008900           ; PSC3 Mode Register 1
PSCMR23:      .equ  MBAR_BASE+0x00008900           ; PSC3 Mode Register 2
PSCCSR3:      .equ  MBAR_BASE+0x00008904           ; PSC3 Clock Select Register
PSCCR3:       .equ  MBAR_BASE+0x00008908           ; PSC3 Command Register
PSCACR3:      .equ  MBAR_BASE+0x00008910           ; PSC3 Auxiliary Control Register
PSCIMR3:      .equ  MBAR_BASE+0x00008914           ; PSC3 Interrupt Mask Register
PSCCTUR3:     .equ  MBAR_BASE+0x00008918           ; PSC3 Counter Timer Upper Register
PSCCTLR3:     .equ  MBAR_BASE+0x0000891c           ; PSC3 Counter Timer Lower Register
PSCSICR3:     .equ  MBAR_BASE+0x00008940           ; PSC3 Control Register
PSCIRCR13:    .equ  MBAR_BASE+0x00008944           ; PSC3 Infrared Control Register 1
PSCIRCR23:    .equ  MBAR_BASE+0x00008948           ; PSC3 Infrared Control Register 2
PSCIRSDR3:    .equ  MBAR_BASE+0x0000894c           ; PSC3 Infrared SIR Divide Register
PSCIRMDR3:    .equ  MBAR_BASE+0x00008950           ; PSC3 Infrared MIR Divide Register
PSCIRFDR3:    .equ  MBAR_BASE+0x00008954           ; PSC3 Infrared FIR Divide Register
PSCRFCR3:     .equ  MBAR_BASE+0x00008968           ; PSC3 RxFIFO Control Register
PSCRFAR3:     .equ  MBAR_BASE+0x0000896e           ; PSC 3 RxFIFO AlarmRegister
PSCTFCR3:     .equ  MBAR_BASE+0x00008988           ; PSC3 TxFIFO Control Register
PSCTFAR3:     .equ  MBAR_BASE+0x0000898e           ; PSC 3 TxFIFO AlarmRegister
DMCR:         .equ  MBAR_BASE+0x00008a00           ; DSPI Module Configuration Register
DCTAR0:       .equ  MBAR_BASE+0x00008a0c           ; DSPI Clock and Transfer Attributes Register 0
DCTAR1:       .equ  MBAR_BASE+0x00008a10           ; DSPI Clock and Transfer Attributes Register 1
DCTAR2:       .equ  MBAR_BASE+0x00008a14           ; DSPI Clock and Transfer Attributes Register 2
DCTAR3:       .equ  MBAR_BASE+0x00008a18           ; DSPI Clock and Transfer Attributes Register 3
DCTAR4:       .equ  MBAR_BASE+0x00008a1c           ; DSPI Clock and Transfer Attributes Register 4
DCTAR5:       .equ  MBAR_BASE+0x00008a20           ; DSPI Clock and Transfer Attributes Register 5
DCTAR6:       .equ  MBAR_BASE+0x00008a24           ; DSPI Clock and Transfer Attributes Register 6
DCTAR7:       .equ  MBAR_BASE+0x00008a28           ; DSPI Clock and Transfer Attributes Register 7
DIRSR:        .equ  MBAR_BASE+0x00008a30           ; DSPI DMA/Interrupt Request Select Register
EIMR0:        .equ  MBAR_BASE+0x00009008           ; Ethernet FEC0 Interrupt Mask Register
ECR0:         .equ  MBAR_BASE+0x00009024           ; Ethernet FEC0 Control Register
RCR0:         .equ  MBAR_BASE+0x00009084           ; Ethernet FEC0 Receive Control Register
TCR0:         .equ  MBAR_BASE+0x000090c4           ; Ethernet FEC0 Transmit Control Register
PALR0:        .equ  MBAR_BASE+0x000090e4           ; Ethernet FEC0 Physical Address Lower
PAUR0:        .equ  MBAR_BASE+0x000090e8           ; Ethernet FEC0 Physical Address Upper
OPD0:         .equ  MBAR_BASE+0x000090ec           ; Ethernet FEC0 Opcode/Pause Duration Register
IAUR0:        .equ  MBAR_BASE+0x00009118           ; Ethernet FEC0 Individual Upper Address Register
IALR0:        .equ  MBAR_BASE+0x0000911c           ; Ethernet FEC0 Individual Lower Address Register
GAUR0:        .equ  MBAR_BASE+0x00009120           ; Ethernet FEC0 Group Upper Address Register
GALR0:        .equ  MBAR_BASE+0x00009124           ; Ethernet FEC0 Group Lower Address Register
FECTFWR0:     .equ  MBAR_BASE+0x00009144           ; Ethernet FEC0 Transmit FIFO Watermark Register
FECRFCR0:     .equ  MBAR_BASE+0x0000918c           ; Ethernet FEC0 Receive FIFO Control Register
FECRFAR0:     .equ  MBAR_BASE+0x00009198           ; Ethernet FEC0 Receive FIFO Alarm Register
FECTFCR0:     .equ  MBAR_BASE+0x000091ac           ; Ethernet FEC0 Transmit FIFO Control Register
FECTFAR0:     .equ  MBAR_BASE+0x000091b8           ; Ethernet FEC0 Transmit FIFO Alarm Register
EIMR1:        .equ  MBAR_BASE+0x00009808           ; Ethernet FEC1 Interrupt Mask Register
ECR1:         .equ  MBAR_BASE+0x00009824           ; Ethernet FEC1 Control Register
RCR1:         .equ  MBAR_BASE+0x00009884           ; Ethernet FEC1 Receive Control Register
TCR1:         .equ  MBAR_BASE+0x000098c4           ; Ethernet FEC1 Transmit Control Register
PALR1:        .equ  MBAR_BASE+0x000098e4           ; Ethernet FEC1 Physical Address Lower
PAUR1:        .equ  MBAR_BASE+0x000098e8           ; Ethernet FEC1 Physical Address Upper
OPD1:         .equ  MBAR_BASE+0x000098ec           ; Ethernet FEC1 Opcode/Pause Duration Register
IAUR1:        .equ  MBAR_BASE+0x00009918           ; Ethernet FEC1 Individual Upper Address Register
IALR1:        .equ  MBAR_BASE+0x0000991c           ; Ethernet FEC1 Individual Lower Address Register
GAUR1:        .equ  MBAR_BASE+0x00009920           ; Ethernet FEC1 Group Upper Address Register
GALR1:        .equ  MBAR_BASE+0x00009924           ; Ethernet FEC1 Group Lower Address Register
FECTFWR1:     .equ  MBAR_BASE+0x00009944           ; Ethernet FEC1 Transmit FIFO Watermark Register
FECRFCR1:     .equ  MBAR_BASE+0x0000998c           ; Ethernet FEC1 Receive FIFO Control Register
FECRFAR1:     .equ  MBAR_BASE+0x00009998           ; Ethernet FEC1 Receive FIFO Alarm Register
FECTFCR1:     .equ  MBAR_BASE+0x000099ac           ; Ethernet FEC1 Transmit FIFO Control Register
FECTFAR1:     .equ  MBAR_BASE+0x000099b8           ; Ethernet FEC1 Transmit FIFO Alarm Register
CANMCR0:      .equ  MBAR_BASE+0x0000a000           ; FlexCAN 0 Module Configuration Register
CANCTRL0:     .equ  MBAR_BASE+0x0000a004           ; FlexCAN 0 Control Register
RXGMASK0:     .equ  MBAR_BASE+0x0000a010           ; FlexCAN 0 Rx Global Mask Register
RX14MASK0:    .equ  MBAR_BASE+0x0000a014           ; FlexCAN 0 Rx 14 Mask Register
RX15MASK0:    .equ  MBAR_BASE+0x0000a018           ; FlexCAN 0 Rx 15 Mask Register
IMASK0:       .equ  MBAR_BASE+0x0000a02a           ; FlexCAN 0 Interrupt Mask Register
CANMCR1:      .equ  MBAR_BASE+0x0000a800           ; FlexCAN 1 Module Configuration Register
CANCTRL1:     .equ  MBAR_BASE+0x0000a804           ; FlexCAN 1 Control Register
RXGMASK1:     .equ  MBAR_BASE+0x0000a810           ; FlexCAN 1 Rx Global Mask Register
RX14MASK1:    .equ  MBAR_BASE+0x0000a814           ; FlexCAN 1 Rx 14 Mask Register
RX15MASK1:    .equ  MBAR_BASE+0x0000a818           ; FlexCAN 1 Rx 15 Mask Register
IMASK1:       .equ  MBAR_BASE+0x0000a82a           ; FlexCAN 1 Interrupt Mask Register
USBAIMR:      .equ  MBAR_BASE+0x0000b001           ; USB Application Interrupt Mask Register
EPTNR:        .equ  MBAR_BASE+0x0000b010           ; USB Endpoint Transaction Number Register
IFR0:         .equ  MBAR_BASE+0x0000b040           ; USB Configuration Interface Register 0
IFR1:         .equ  MBAR_BASE+0x0000b042           ; USB Configuration Interface Register 1
IFR2:         .equ  MBAR_BASE+0x0000b044           ; USB Configuration Interface Register 2
IFR3:         .equ  MBAR_BASE+0x0000b046           ; USB Configuration Interface Register 3
IFR4:         .equ  MBAR_BASE+0x0000b048           ; USB Configuration Interface Register 4
IFR5:         .equ  MBAR_BASE+0x0000b04a           ; USB Configuration Interface Register 5
IFR6:         .equ  MBAR_BASE+0x0000b04c           ; USB Configuration Interface Register 6
IFR7:         .equ  MBAR_BASE+0x0000b04e           ; USB Configuration Interface Register 7
IFR8:         .equ  MBAR_BASE+0x0000b050           ; USB Configuration Interface Register 8
IFR9:         .equ  MBAR_BASE+0x0000b052           ; USB Configuration Interface Register 9
IFR10:        .equ  MBAR_BASE+0x0000b054           ; USB Configuration Interface Register 10
IFR11:        .equ  MBAR_BASE+0x0000b056           ; USB Configuration Interface Register 11
IFR12:        .equ  MBAR_BASE+0x0000b058           ; USB Configuration Interface Register 12
IFR13:        .equ  MBAR_BASE+0x0000b05a           ; USB Configuration Interface Register 13
IFR14:        .equ  MBAR_BASE+0x0000b05c           ; USB Configuration Interface Register 14
IFR15:        .equ  MBAR_BASE+0x0000b05e           ; USB Configuration Interface Register 15
IFR16:        .equ  MBAR_BASE+0x0000b060           ; USB Configuration Interface Register 16
IFR17:        .equ  MBAR_BASE+0x0000b062           ; USB Configuration Interface Register 17
IFR18:        .equ  MBAR_BASE+0x0000b064           ; USB Configuration Interface Register 18
IFR19:        .equ  MBAR_BASE+0x0000b066           ; USB Configuration Interface Register 19
IFR20:        .equ  MBAR_BASE+0x0000b068           ; USB Configuration Interface Register 20
IFR21:        .equ  MBAR_BASE+0x0000b06a           ; USB Configuration Interface Register 21
IFR22:        .equ  MBAR_BASE+0x0000b06c           ; USB Configuration Interface Register 22
IFR23:        .equ  MBAR_BASE+0x0000b06e           ; USB Configuration Interface Register 23
IFR24:        .equ  MBAR_BASE+0x0000b070           ; USB Configuration Interface Register 24
IFR25:        .equ  MBAR_BASE+0x0000b072           ; USB Configuration Interface Register 25
IFR26:        .equ  MBAR_BASE+0x0000b074           ; USB Configuration Interface Register 26
IFR27:        .equ  MBAR_BASE+0x0000b076           ; USB Configuration Interface Register 27
IFR28:        .equ  MBAR_BASE+0x0000b078           ; USB Configuration Interface Register 28
IFR29:        .equ  MBAR_BASE+0x0000b07a           ; USB Configuration Interface Register 29
IFR30:        .equ  MBAR_BASE+0x0000b07c           ; USB Configuration Interface Register 30
IFR31:        .equ  MBAR_BASE+0x0000b07e           ; USB Configuration Interface Register 31
EP0MPSR:      .equ  MBAR_BASE+0x0000b102           ; USB Endpoint 0 Max Packet Size Register
EP0IFR:       .equ  MBAR_BASE+0x0000b104           ; USB Endpoint 0 Interface Number Register
EP1OUTACR:    .equ  MBAR_BASE+0x0000b131           ; USB Endpoint 1 OUT Attribute Control Register
EP1OUTMPSR:   .equ  MBAR_BASE+0x0000b132           ; USB Endpoint 1 OUT Max Packet Size Register
EP1OUTIFR:    .equ  MBAR_BASE+0x0000b134           ; USB Endpoint 1 OUT Interface Number Register
EP1INACR:     .equ  MBAR_BASE+0x0000b149           ; USB Endpoint 1 IN Attribute Control Register
EP1INMPSR:    .equ  MBAR_BASE+0x0000b14a           ; USB Endpoint 1 IN Max Packet Size Register
EP1INIFR:     .equ  MBAR_BASE+0x0000b14c           ; USB Endpoint 1 IN Interface Number Register
EP2OUTACR:    .equ  MBAR_BASE+0x0000b161           ; USB Endpoint 2 OUT Attribute Control Register
EP2OUTMPSR:   .equ  MBAR_BASE+0x0000b162           ; USB Endpoint 2 OUT Max Packet Size Register
EP2OUTIFR:    .equ  MBAR_BASE+0x0000b164           ; USB Endpoint 2 OUT Interface Number Register
EP2INACR:     .equ  MBAR_BASE+0x0000b179           ; USB Endpoint 2 IN Attribute Control Register
EP2INMPSR:    .equ  MBAR_BASE+0x0000b17a           ; USB Endpoint 2 IN Max Packet Size Register
EP2INIFR:     .equ  MBAR_BASE+0x0000b17c           ; USB Endpoint 2 IN Interface Number Register
EP3OUTACR:    .equ  MBAR_BASE+0x0000b191           ; USB Endpoint 3 OUT Attribute Control Register
EP3OUTMPSR:   .equ  MBAR_BASE+0x0000b192           ; USB Endpoint 3 OUT Max Packet Size Register
EP3OUTIFR:    .equ  MBAR_BASE+0x0000b194           ; USB Endpoint 3 OUT Interface Number Register
EP3INACR:     .equ  MBAR_BASE+0x0000b1a9           ; USB Endpoint 3 IN Attribute Control Register
EP3INMPSR:    .equ  MBAR_BASE+0x0000b1aa           ; USB Endpoint 3 IN Max Packet Size Register
EP3INIFR:     .equ  MBAR_BASE+0x0000b1ac           ; USB Endpoint 3 IN Interface Number Register
EP4OUTACR:    .equ  MBAR_BASE+0x0000b1c1           ; USB Endpoint 4 OUT Attribute Control Register
EP4OUTMPSR:   .equ  MBAR_BASE+0x0000b1c2           ; USB Endpoint 4 OUT Max Packet Size Register
EP4OUTIFR:    .equ  MBAR_BASE+0x0000b1c4           ; USB Endpoint 4 OUT Interface Number Register
EP4INACR:     .equ  MBAR_BASE+0x0000b1d9           ; USB Endpoint 4 IN Attribute Control Register
EP4INMPSR:    .equ  MBAR_BASE+0x0000b1da           ; USB Endpoint 4 IN Max Packet Size Register
EP4INIFR:     .equ  MBAR_BASE+0x0000b1dc           ; USB Endpoint 4 IN Interface Number Register
EP5OUTACR:    .equ  MBAR_BASE+0x0000b1f1           ; USB Endpoint 5 OUT Attribute Control Register
EP5OUTMPSR:   .equ  MBAR_BASE+0x0000b1f2           ; USB Endpoint 5 OUT Max Packet Size Register
EP5OUTIFR:    .equ  MBAR_BASE+0x0000b1f4           ; USB Endpoint 5 OUT Interface Number Register
EP5INACR:     .equ  MBAR_BASE+0x0000b209           ; USB Endpoint 5 IN Attribute Control Register
EP5INMPSR:    .equ  MBAR_BASE+0x0000b20a           ; USB Endpoint 5 IN Max Packet Size Register
EP5INIFR:     .equ  MBAR_BASE+0x0000b20c           ; USB Endpoint 5 IN Interface Number Register
EP6OUTACR:    .equ  MBAR_BASE+0x0000b221           ; USB Endpoint 6 OUT Attribute Control Register
EP6OUTMPSR:   .equ  MBAR_BASE+0x0000b222           ; USB Endpoint 6 OUT Max Packet Size Register
EP6OUTIFR:    .equ  MBAR_BASE+0x0000b224           ; USB Endpoint 6 OUT Interface Number Register
EP6INACR:     .equ  MBAR_BASE+0x0000b239           ; USB Endpoint 6 IN Attribute Control Register
EP6INMPSR:    .equ  MBAR_BASE+0x0000b23a           ; USB Endpoint 6 IN Max Packet Size Register
EP6INIFR:     .equ  MBAR_BASE+0x0000b23c           ; USB Endpoint 6 IN Interface Number Register
USBCR:        .equ  MBAR_BASE+0x0000b404           ; USB Control Register
DRAMCR:       .equ  MBAR_BASE+0x0000b408           ; USB Descriptor RAM Control Register
DRAMDR:       .equ  MBAR_BASE+0x0000b40c           ; USB Descriptor RAM Data Register
USBIMR:       .equ  MBAR_BASE+0x0000b414           ; USB Interrupt Mask Register
EP0STAT:      .equ  MBAR_BASE+0x0000b440           ; USB Endpoint 0 Status and Control Register
EP0IMR:       .equ  MBAR_BASE+0x0000b448           ; USB Endpoint 0 Interrupt Mask Register
EP0FRCFGR:    .equ  MBAR_BASE+0x0000b44c           ; USB Endpoint 0 FIFO RAM Configuration Register
EP0FCR:       .equ  MBAR_BASE+0x0000b458           ; USB Endpoint 0 FIFO Control Register
EP0FAR:       .equ  MBAR_BASE+0x0000b45c           ; USB Endpoint 0 FIFO AlarmRegister
EP1STAT:      .equ  MBAR_BASE+0x0000b470           ; USB Endpoint 1 Status and Control Register
EP1IMR:       .equ  MBAR_BASE+0x0000b478           ; USB Endpoint 1 Interrupt Mask Register
EP1FRCFGR:    .equ  MBAR_BASE+0x0000b47c           ; USB Endpoint 1 FIFO RAM Configuration Register
EP1FCR:       .equ  MBAR_BASE+0x0000b488           ; USB Endpoint 1 FIFO Control Register
EP1FAR:       .equ  MBAR_BASE+0x0000b48c           ; USB Endpoint 1 FIFO AlarmRegister
EP2STAT:      .equ  MBAR_BASE+0x0000b4a0           ; USB Endpoint 2 Status and Control Register
EP2IMR:       .equ  MBAR_BASE+0x0000b4a8           ; USB Endpoint 2 Interrupt Mask Register
EP2FRCFGR:    .equ  MBAR_BASE+0x0000b4ac           ; USB Endpoint 2 FIFO RAM Configuration Register
EP2FCR:       .equ  MBAR_BASE+0x0000b4b8           ; USB Endpoint 2 FIFO Control Register
EP2FAR:       .equ  MBAR_BASE+0x0000b4bc           ; USB Endpoint 2 FIFO AlarmRegister
EP3STAT:      .equ  MBAR_BASE+0x0000b4d0           ; USB Endpoint 3 Status and Control Register
EP3IMR:       .equ  MBAR_BASE+0x0000b4d8           ; USB Endpoint 3 Interrupt Mask Register
EP3FRCFGR:    .equ  MBAR_BASE+0x0000b4dc           ; USB Endpoint 3 FIFO RAM Configuration Register
EP3FCR:       .equ  MBAR_BASE+0x0000b4e8           ; USB Endpoint 3 FIFO Control Register
EP3FAR:       .equ  MBAR_BASE+0x0000b4ec           ; USB Endpoint 3 FIFO AlarmRegister
EP4STAT:      .equ  MBAR_BASE+0x0000b500           ; USB Endpoint 4 Status and Control Register
EP4IMR:       .equ  MBAR_BASE+0x0000b508           ; USB Endpoint 4 Interrupt Mask Register
EP4FRCFGR:    .equ  MBAR_BASE+0x0000b50c           ; USB Endpoint 4 FIFO RAM Configuration Register
EP4FCR:       .equ  MBAR_BASE+0x0000b518           ; USB Endpoint 4 FIFO Control Register
EP4FAR:       .equ  MBAR_BASE+0x0000b51c           ; USB Endpoint 4 FIFO AlarmRegister
EP5STAT:      .equ  MBAR_BASE+0x0000b530           ; USB Endpoint 5 Status and Control Register
EP5IMR:       .equ  MBAR_BASE+0x0000b538           ; USB Endpoint 5 Interrupt Mask Register
EP5FRCFGR:    .equ  MBAR_BASE+0x0000b53c           ; USB Endpoint 5 FIFO RAM Configuration Register
EP5FCR:       .equ  MBAR_BASE+0x0000b548           ; USB Endpoint 5 FIFO Control Register
EP5FAR:       .equ  MBAR_BASE+0x0000b54c           ; USB Endpoint 5 FIFO AlarmRegister
EP6STAT:      .equ  MBAR_BASE+0x0000b560           ; USB Endpoint 6 Status and Control Register
EP6IMR:       .equ  MBAR_BASE+0x0000b568           ; USB Endpoint 6 Interrupt Mask Register
EP6FRCFGR:    .equ  MBAR_BASE+0x0000b56c           ; USB Endpoint 6 FIFO RAM Configuration Register
EP6FCR:       .equ  MBAR_BASE+0x0000b578           ; USB Endpoint 6 FIFO Control Register
EP6FAR:       .equ  MBAR_BASE+0x0000b57c           ; USB Endpoint 6 FIFO AlarmRegister
SRAMBEG:      .equ  MBAR_BASE+0x00010000           ; On Chip SRAM Beginning address
SRAMEND:      .equ  MBAR_BASE+0x00017fff           ; On Chip SRAM End address
SSCR:         .equ  MBAR_BASE+0x0001ffc0           ; System SRAM Configuration Register
TCCR:         .equ  MBAR_BASE+0x0001ffc4           ; Transfer Count Configuration Register
TCCRDR:       .equ  MBAR_BASE+0x0001ffc8           ; Transfer Count Configuration Register - DMA Read
TCCRDW:       .equ  MBAR_BASE+0x0001ffcc           ; Transfer Count Configuration Register - DMA Write
TCCRSEC:      .equ  MBAR_BASE+0x0001ffd0           ; Transfer Count Configuration Register - SEC
EUACRH:       .equ  MBAR_BASE+0x00021000           ; EU Assignment Control High Register 
EUACRL:       .equ  MBAR_BASE+0x00021004           ; EU Assignment Control Low Register 
SIMRH:        .equ  MBAR_BASE+0x00021008           ; SEC Interrupt Mask High Register
SIMRL:        .equ  MBAR_BASE+0x0002100c           ; SEC Interrupt Mask Low Register
CCCR0:        .equ  MBAR_BASE+0x0002200c           ; Crypto-Channel 0 Configuration Register
CCCR1:        .equ  MBAR_BASE+0x0002300c           ; Crypto-Channel 1 Configuration Register

; Cache Control Register bits
DEC:        .equ    0x80000000  ; Enable Data Cache
DW:         .equ    0x40000000  ; Data default write-protect
DESB:       .equ    0x20000000  ; Enable data store buffer
DDPI:       .equ    0x10000000  ; Disable CPUSHL invalidation
DHLCK:      .equ    0x08000000  ; Half-data cache lock mode
                                ; Default data cache mode
DDCM_WTI:   .equ    0x00000000  ; 00 Cacheable write-through imprecise
DDCM_CC:    .equ    0x02000000  ; 01 Cacheable copyback
DDCM_CIP:   .equ    0x04000000  ; 10 Cache-inhibited precise
DDCM_CII:   .equ    0x06000000  ; 11 Cache-inhibited imprecise
DCINVA:     .equ    0x01000000  ; Data cache invalidate all
DDSP:       .equ    0x00800000  ; Data default supervisor-protect
BEC:        .equ    0x00080000  ; Enable branch cache
BCINVA:     .equ    0x00040000  ; Branch cache invalidate
IEC:        .equ    0x00008000  ; Enable instruction cache
DNFB:       .equ    0x00002000  ; Default cache-inhibited fill buffer
IDPI:       .equ    0x00001000  ; Instruction CPUSHL invalidate disable
IHLCK:      .equ    0x00000800  ; Instruction cache half-lock
IDCM:       .equ    0x00000400  ; Instruction default cache mode
ICINVA:     .equ    0x00000100  ; Instruction cache invalidate
IDSP:       .equ    0x00000080  ; Default instruction supervisor protection bit
EUSP:       .equ    0x00000020  ; Enables the use of the user stack pointer
DF:         .equ    0x00000010  ; Disable FPU

CACHE_DISABLE   .equ    DCINVA+BCINVA+ICINVA        ;$01040100
CACHE_ENABLE    .equ    DEC+DDCM_CIP+BEC+IEC+IDCM   ;$84088400

CACHE_SETS  .equ    512
CACHE_SIZE  .equ    16
CACHE_WAYS  .equ    4

; System PLL Control Register (SPCR) Enable/Status bits (Default - All ON)
PLLK    .equ    0x80000000  ; System PLL Lock Status (RO)
COREN   .equ    0x4000  ; Core/Comm - CF4 Core, Sys SRAM, CommBus, I2C, Comm Timer, Ext DMA
CRYENB  .equ    0x2000  ; Crypto Clock B
CRYENA  .equ    0x1000  ; Crypto Clock A
CAN1EN  .equ    0x0800  ; CAN1 Clock
PSCEN   .equ    0x0200  ; PSC Clock - all PSC modules
USBEN   .equ    0x0080  ; USB Clock
FEC1EN  .equ    0x0040  ; FEC1 Clock
FEC0EN  .equ    0x0020  ; FEC0 Clock
DMAEN   .equ    0x0010  ; Multi-channel DMA Clock
CAN0EN  .equ    0x0008  ; CAN0 Clock
FBEN    .equ    0x0004  ; FlexBus Clock
PCIEN   .equ    0x0002  ; PCI Bus Clock
MEMEN   .equ    0x0001  ; Memory Clock - SCRAM controller module
SPCR_SET .equ   COREN+CRYENB+CRYENA+PSCEN+USBEN+FEC1EN+FEC0EN+DMAEN+FBEN+PCIEN+MEMEN

; Additional MBAR peripheral registers
MCF_GPIO_PODR_FBCTL       EQU    MBAR_BASE+0x00000A00
MCF_GPIO_PODR_FBCS        EQU    MBAR_BASE+0x00000A01
MCF_GPIO_PODR_DMA         EQU    MBAR_BASE+0x00000A02
MCF_GPIO_PODR_FEC0H       EQU    MBAR_BASE+0x00000A04
MCF_GPIO_PODR_FEC0L       EQU    MBAR_BASE+0x00000A05
MCF_GPIO_PODR_FEC1H       EQU    MBAR_BASE+0x00000A06
MCF_GPIO_PODR_FEC1L       EQU    MBAR_BASE+0x00000A07
MCF_GPIO_PODR_FECI2C      EQU    MBAR_BASE+0x00000A08
MCF_GPIO_PODR_PCIBG       EQU    MBAR_BASE+0x00000A09
MCF_GPIO_PODR_PCIBR       EQU    MBAR_BASE+0x00000A0A
MCF_GPIO_PODR_PSC3PSC2    EQU    MBAR_BASE+0x00000A0C
MCF_GPIO_PODR_PSC1PSC0    EQU    MBAR_BASE+0x00000A0D
MCF_GPIO_PODR_DSPI        EQU    MBAR_BASE+0x00000A0E


;**********************************************************************
;   Local Variables
    .bss

CACR_SHADOW ds.l    1           ; Cache Control Reg shadow buffer

;**********************************************************************

    XREF    pbit
    WEAK    __ghs_romend        ; end of .text - 0 if running in RAM

    .text
    .globl  init_processor
init_processor:

; Mask all interrupts
        move.w   #$2700,%sr
; Disable/Invalidate cache
        move.l   #CACHE_DISABLE,d0
        movec    d0,CACR

;****************************************
;* Module Base Address Register         *
;****************************************
; Base address of internal peripherals (MBAR) = $80000000
        move.l   #MBAR_BASE+$0000,%d0
        movec    %d0,%MBAR

;****************************************
;* Basic Processor Information          *
;****************************************
; Exception vector table at $00100000
        move.l   #$00100000,%d0
        movec    %d0,%VBR

;****************************************
;* Disable all interrupt sources        *
;****************************************
        move.l   #ICR015,%a0             ; Set ICR015-ICR063 to 0x00
        move.l   #49,%d1
        move.b   #0,%d0
disable_INTC0_loop:         
        move.b   %d0,(%a0)+
        subq.l   #1,%d1
        bne      disable_INTC0_loop

;****************************************
;* Disable Watchdog Timer               *
;****************************************
; Disable Watchdog Timer
        move.l   #$00000000,%d0
        move.l   %d0,GMS0

;****************************************
;* Disable and invalidate cache
;* Enable branch cache
;****************************************
    ;Data Cache disabled (CACR[DEC]=0)
    ;Instruction Cache disabled (CACR[IEC]=0)
    ;Branch Cache enabled (CACR[BEC]=1)

        move.l   #BEC,d0
        movec    d0,CACR


;****************************************
;* On-chip SRAM Modules                 *
;****************************************
; Internal SRAM block 0 disabled
        move.l   #$00000000,%d0
        movec    %d0,%RAMBAR0

; Internal SRAM block 1 disabled
        movec    %d0,%RAMBAR1

; System SRAM base address = 0x80010000 (MBAR + 0x10000)
; The four system SRAM banks are not interleaved (linear)
; System SRAM arbitration policy:
;     Any master which wins control of any bank keeps it for a maximum of 60 transfers
        move.l   %d0,SSCR
        move.l   #$0f0f0f0f,%d0
        move.l   %d0,TCCR
        move.l   %d0,TCCRDR
        move.l   %d0,TCCRDW
        move.l   %d0,TCCRSEC


;****************************************
;* Chip Select Module (FlexBus)         *
;****************************************
; Chip Select 1: 256 MB of Flash at base address $10000000
; Port size = 32 bits
; Assert chip select on first rising clock edge after address is asserted
; Generate internal transfer acknowledge after 6 wait states
; Address is held for 1 clock at end of read and write cycles
        move.l   #$10000000,%d0
        move.l   %d0,CSAR1
        move.l   #$00001900,%d0
        move.l   %d0,CSCR1
        move.l   #$0fff0001,%d0
        move.l   %d0,CSMR1

; Chip Select 0: 32 MB of Flash at base address $00000000
; Port size = 32 bits
; Assert chip select on first rising clock edge after address is asserted
; Generate internal transfer acknowledge after 6 wait states
; Address is held for 1 clock at end of read and write cycles
        move.l   #$00000000,d0
        move.l   d0,CSAR0
        move.l   #$00001920,d0
        move.l   d0,CSCR0
        move.l   #$01ff0001,d0
        move.l   d0,CSMR0
        
; Chip Select 3: 128 KB of FPGA at base address $40000000
; Port size = 16 bits
; Generate internal transfer acknowleddge after 2 wait states 
        move.l   #$40000000,d0
        move.l   d0,CSAR3 
        move.l   #$00000980,d0
        move.l   d0,CSCR3
        move.l   #$00010001,d0
        move.l   d0,CSMR3
        


;****************************************
;* Edge Port Module (EPORT)             *
;****************************************
; Pins 1-7 configured as GPIO inputs
        move.l   #$0000,%d0
        move.w   %d0,EPPAR
        move.b   %d0,EPDDR
        move.b   %d0,EPIER

;****************************************
;* Ethernet Module                      *
;****************************************
; Fast Ethernet Controller 0 disabled
        move.l   #$00000001,%d0
        move.l   %d0,RCR0

; Fast Ethernet Controller 1 disabled
        move.l   %d0,RCR1

;****************************************
;* FlexCAN Module                       *
;****************************************
; FlexCAN controller 0 disabled (CANMCR0[MDIS]=1)
        move.l   #$0000,%d0
        move.w   %d0,IMASK0
        move.l   #$1fffffff,%d0
        move.l   %d0,RXGMASK0
        move.l   %d0,RX14MASK0
        move.l   %d0,RX15MASK0
        move.l   #$00000000,%d0
        move.l   %d0,CANCTRL0
        move.l   #$d890000f,%d0
        move.l   %d0,CANMCR0

; FlexCAN controller 1 disabled (CANMCR1[MDIS]=1)
        move.l   #$0000,%d0
        move.w   %d0,IMASK1
        move.l   #$1fffffff,%d0
        move.l   %d0,RXGMASK1
        move.l   %d0,RX14MASK1
        move.l   %d0,RX15MASK1
        move.l   #$00000000,%d0
        move.l   %d0,CANCTRL1
        move.l   #$d890000f,%d0
        move.l   %d0,CANMCR1

;****************************************
;* Floating Point Unit (FPU)            *
;****************************************
; Floating-Point Unit (FPU) enabled
; Default rounding precision = Double precision (D)
; Rounding mode = round to nearest (RN)
; All classes of floating-point exception disabled
        move.l   #$00000000,%d0
        fmove.l  %d0,%FPCR

;*******************************************
;* Programmable Serial Controllers (PSCs)  *
;*******************************************
; Programmable Serial Controller 0 configured for UART mode
; Baud Rate = 58962.3
; Baud Rate = 115740 = (system clk freq)/ (CT * 16 * 2) where CT = PSCCTUR (Upper) | PSCCTLR (Lower) 
;                       Ref MCF548x Rev 4 page 27-21
; 8 data bits, 1 stop bit, No parity
; /PSC0CTS input has no effect on the transmitter
; /PSC0RTS output is not affected by receiver or transmitter
; All interrupt sources are disabled (masked)

; PSC 0: Set mode
        move.l  #0,d0
        move.b   %d0,PSCSICR0

; PSC 0 Clocking
        move.l   #$dd,%d0
        move.b   %d0,PSCCSR0
        move.l   #$00,%d0
        move.b   %d0,PSCCTUR0
;       move.l   #$35,%d0
        move.l   #$1B,%d0
        move.b   %d0,PSCCTLR0

; PSC 0: Reset receiver, transmitter and mode register pointer
        move.l   #$20,%d0
        move.b   %d0,PSCCR0
        move.l   #$30,%d0
        move.b   %d0,PSCCR0
        move.l   #$40,%d0
        move.b   %d0,PSCCR0
        move.l   #$50,%d0
        move.b   %d0,PSCCR0
        move.l   #$10,%d0
        move.b   %d0,PSCCR0

; PSC 0 Interrupt mask
        move.l   #$0000,%d0
        move.w   %d0,PSCIMR0

; PSC 0 Auxiliary Control Register
        move.b   %d0,PSCACR0

; PSC 0 Mode Registers
        move.l   #$33,%d0
        move.b   %d0,PSCMR10
        move.l   #$07,%d0
        move.b   %d0,PSCMR20

; PSC 0 Receive FIFO
        move.l   #$01000000,%d0
        move.l   %d0,PSCRFCR0
        move.l   #$0001,%d0
        move.w   %d0,PSCRFAR0

; PSC 0 Transmit FIFO
; Transmit FIFO alarm set when less than or equal to 0 data bytes in FIFO, and
; cleared when less than or equal to 4 free bytes remain
        move.l   #$01000000,%d0
        move.l   %d0,PSCTFCR0
        move.l   #$0000,%d0
        move.w   %d0,PSCTFAR0

; PSC 0: Enable receiver and transmitter
        move.l   #$05,%d0
        move.b   %d0,PSCCR0

;****************************************
;* SDRAM Controller                     *
;****************************************
; Ensure that there is a delay from processor reset of the time recommended in
; the SDRAM data sheet (typically 100-200 microseconds) until the following 
; code so that the SDRAM is ready for commands...

; Check to see if the SDRAM has already been initialized
; by a run control tool and skip if so
        move.l   SDCR,%d0
        and.l    #$10000000,%d0
        bne      skip_sdram_init

; SDRAM controller configured for Double-data rate (DDR) SDRAM
; SDRAM specification:
;     SDRAM clock frequency = 100.00 MHz
;     CASL = 2
;     ACTV-to-read/write delay, tRCD = 15.0 nanoseconds
;     Write recovery time, tWR = 15.0 nanoseconds
;     Precharge comand to ACTV command, tRP = 15.0 nanoseconds
;     Auto refresh command period, tRFC = 72.0 nanoseconds
;     Average periodic refresh interval, tREFI = 15.6 microseconds

; Initialise the drive strength register
        move.l   #$000002aa,%d0
        move.l   %d0,SDRAMDS

; Memory block 0 enabled - 32 MBytes at address $30000000
; Block consists of 2 devices x 128 MBits (12 rows x 9 columns x 4 banks)
        move.l   #$30000018,%d0
        move.l   %d0,CS0CFG

; Memory block 1 disabled
        move.l   #$00000000,%d0
        move.l   %d0,CS1CFG

; Memory block 2 disabled
        move.l   %d0,CS2CFG

; Memory block 3 disabled
        move.l   %d0,CS3CFG

; Initialise SDCFG1 register with delay and timing values
;     SRD2RW = 7, SWT2RD = 3, RDLAT = 6, ACT2RW = 1
;     PRE2ACT = 1, REF2ACT = 7, WTLAT = 3
        move.l   #$73611730,%d0
        move.l   %d0,SDCFG1

; Initialise SDCFG2 register with delay and timing values
;     BRD2PRE = 4, BWT2RW = 6, BRD2WT = 7, BL = 7
        move.l   #$46770000,%d0
        move.l   %d0,SDCFG2

; Precharge sequence and enable write to SDMR
        move.l   #$e00b0002,%d0
        move.l   %d0,SDCR

; Write Extended Mode Register
        move.l   #$40010000,%d0
        move.l   %d0,SDMR

; Write Mode Register and Reset DLL
        move.l   #$048d0000,%d0
        move.l   %d0,SDMR

; Insert code here to pause for DLL lock time specified by memory...

; Precharge sequence
        move.l   SDCR,%d0
        or.l     #$00000002,%d0
        move.l   %d0,SDCR

; Refresh sequence...
; (check the number of refreshes required by the SDRAM manufacturer)
        move.l   SDCR,%d0
        or.l     #$00000004,%d0
        move.l   %d0,SDCR
        move.l   SDCR,%d0
        or.l     #$00000004,%d0
        move.l   %d0,SDCR

; Write Mode Register and clear the Reset DLL bit
        move.l   #$008d0000,%d0
        move.l   %d0,SDMR

; Enable automatic refresh and lock SDMR
        move.l   SDCR,%d0
        and.l    #$7fffffff,%d0
        move.l   %d0,SDCR
        move.l   SDCR,%d0
        or.l     #$10000f00,%d0
        move.l   %d0,SDCR

skip_sdram_init:         


;*********************************************
;* Pin Assignment and General Purpose I/O    *
;* Ensure GPIO is in the reset configuration *
;*********************************************
; Pin assignments for port FBCTL
;     Pin /BWE3    : FlexBus /BWE3 or TSIZ1
;     Pin /BWE2    : FlexBus /BWE2 or TSIZ0
;     Pin /BWE1    : FlexBus /BWE1 or FBADDR1
;     Pin /BWE0    : FlexBus /BWE0 or FBADDR0
;     Pin /OE      : FlexBus /OE
;     Pin R/W      : FlexBus R/W
;     Pin /TA      : FlexBus /TA
;     Pin ALE      : FlexBus ALE
        move.l   #$00,d0
        move.b   d0,PDDR_FBCTL
        move.l   #$5577,d0
        move.w   d0,PAR_FBCTL

; Pin assignments for port FBCS
;     Pin /FBCS1   : FlexBus /CS1
;     Pin /FBCS2   : FlexBus /CS2
;     Pin /FBCS3   : FlexBus /CS3
;     Pin /FBCS4   : FlexBus /CS4
;     Pin /FBCS5   : FlexBus /CS5
        move.l   #$00,d0
        move.b   d0,PDDR_FBCS
        move.l   #$3e,d0
        move.b   d0,PAR_FBCS

; Pin assignments for port DMA
;     Pins are all GPIO inputs
        move.l   #$00,d0
        move.b   d0,PDDR_DMA
        move.b   d0,PAR_DMA

; Pin assignments for ports FECI2CIRQ, FEC0H, FEC0L, FEC1H and FEC1L
;     Pins in ports FEC0H and FEC0L are all GPIO inputs
;     Pins in ports FEC1H and FEC1L are all GPIO inputs
;     Pin FEC0MDIO : GPIO input
;     Pin FEC0MDC  : GPIO input
;     Pin FEC1MDIO : I2C serial data
;     Pin FEC1MDC  : I2C serial data
;     Pin SDA      : I2C serial data
;     Pin SCL      : I2C serial clock
;     Pin /IRQ6    : External interrupt /IRQ6
;     Pin /IRQ5    : External interrupt /IRQ5
;        move.b   d0,PDDR_FEC0H
;        move.b   d0,PDDR_FEC0L
;        move.b   d0,PDDR_FEC1H
;        move.b   d0,PDDR_FEC1L
;        move.b   d0,PDDR_FECI2C
;        move.l   #$0283,d0
;        move.w   d0,PAR_FECI2CIRQ

; Pin assignments for ports FECI2CIRQ, FEC0H, FEC0L, FEC1H and FEC1L
;     Pins in ports FEC0H and FEC0L are all GPIO inputs
;     Pins in port FEC1H are all GPIO inputs
;     FEC1L[7] : GPIO output
;     FEC1L[6] : GPIO output
;     FEC1L[5] : GPIO input
;     FEC1L[4] : GPIO input
;     FEC1L[3] : GPIO input
;     FEC1L[2] : GPIO input
;     FEC1L[1] : GPIO input
;     FEC1L[0] : GPIO input
;     Pin FEC0MDIO : GPIO input
;     Pin FEC0MDC  : GPIO input
;     Pin FEC1MDIO : I2C serial data
;     Pin FEC1MDC  : I2C serial data
;     Pin SDA      : GPIO output
;     Pin SCL      : GPIO output
;     Pin /IRQ6    : External interrupt /IRQ6
;     Pin /IRQ5    : External interrupt /IRQ5
      ;  move.l   #$00,d0
      ;  move.b   d0,PDDR_FEC0H
      ;  move.b   d0,PDDR_FEC0L
      ;  move.b   d0,PDDR_FEC1H
      ;  move.l   #$c0,d0
      ;  move.b   d0,PDDR_FEC1L
      ;  move.l   #$00,d0
      ;  move.b   d0,PDDR_FECI2C
      ;  move.l   #$028f,d0
      ;  move.w   d0,PAR_FECI2CIRQ

; Pin assignments for port FEC0H
;      FEC0H[7] : GPIO input - Discrete7
;      FEC0H[6] : GPIO input - Discrete6
;      FEC0H[5] : GPIO input - Discrete5
;      FEC0H[4] : GPIO input - Discrete4
;      FEC0H[3] : GPIO input - Discrete3
;      FEC0H[2] : GPIO input - Discrete2
;      FEC0H[1] : GPIO input - Discrete1
;      FEC0H[0] : GPIO input - Discrete0
        move.l   #$00,d0
        move.b   d0,PDDR_FEC0H
        
; Pin assignments for port FEC0L
;      FEC0L[7] : GPIO output - LSS3 (LOW=OFF)
;      FEC0L[6] : GPIO output - LSS2 (LOW=OFF)
;      FEC0L[5] : GPIO output - LSS1 (LOW=OFF)
;      FEC0L[4] : GPIO output - LSS0 (LOW=OFF)
;      FEC0L[3] : GPIO input  - LSS3_WA
;      FEC0L[2] : GPIO input  - LSS2_WA
;      FEC0L[1] : GPIO input  - LSS1_WA
;      FEC0L[0] : GPIO input  - LSS0_WA

;      Set Ouput Data Register 
       move.l   #$0f,d0
       move.b   d0,MCF_GPIO_PODR_FEC0L
       
;      Set Data Direction 
       move.l   #$f0,d0
       move.b   d0,PDDR_FEC0L
       
; Pin assignments for port FEC1H
;      FEC1H[7] : GPIO output  - GSMenb       (LOW=OFF)
;      FEC1H[6] : GPIO output  - WLANenb      (LOW=OFF)
;      FEC1H[5] : GPIO output  - FPGAReconfig (HIGH=OFF)
;      FEC1H[4] : GPIO input   - FPGA_Cfg   
;      FEC1H[3] : GPIO input   - FPGA_ERR 
;      FEC1H[2] : GPIO input   - Not Used 
;      FEC1H[1] : GPIO input   - CAN1_Err
;      FEC1H[0] : GPIO input   - CAN0_Err 

;      Set Ouput Data Register 
       move.l  #$20,d0
       move.b  d0,MCF_GPIO_PODR_FEC1H
       
;      Set Data Direction 
       move.l  #$e0,d0
       move.b  d0,PDDR_FEC1H
      
; Pin assignments for port FEC1L
;      FEC1L[7] : GPIO output  - LiBattToADC  (LOW=OFF)
;      FEC1L[6] : GPIO output  - WDog         (LOW=OFF)
;      FEC1L[5] : GPIO input   - Not Used    
;      FEC1L[4] : GPIO input   - WOW          (???=OFF) 
;      FEC1L[3] : GPIO input   - LSS_Ovi      (???=OFF)
;      FEC1L[2] : GPIO input   - DFlash_Sta   (???=OFF}
;      FEC1L[1] : GPIO input   - PFlash_Sta   (???=OFF}
;      FEC1L[0] : GPIO input   - HWPFEN_Sta   (HIGH=ENB)

;      Set Ouput Data Register 
       move.l  #$00,d0
       move.b  d0,MCF_GPIO_PODR_FEC1L
       
;      Set Data Direction 
       move.l  #$C0,d0
       move.b  d0,PDDR_FEC1L
       
; Pin assignments for port FECI2C
;      FECI2C[7] : GPIO input   - Not Used
;      FECI2C[6] : GPIO input   - Not Used
;      FECI2C[5] : GPIO input   - Not Used    
;      FECI2C[4] : GPIO input   - Not Used 
;      FECI2C[3] : GPIO input   - WLAN_WOW_Enb (???=OFF)
;      FECI2C[2] : GPIO input   - SW_PFEN_Sta  (???=OFF)
;      FECI2C[1] : GPIO input   - Not Used
;      FECI2C[0] : GPIO input   - Not Used
       
;      Set Data Direction 
       move.l  #$00,d0
       move.b  d0,PDDR_FECI2C

;      Set Pin Assignement Register        
       move.l   #$028f,d0
       move.w   d0,PAR_FECI2CIRQ
       
; Pin assignments for port PCIBG
;     Pin /PCIBG7  : GPIO Input  -  Not Used
;     Pin /PCIBG6  : GPIO Input  -  Not Used 
;     Pin /PCIBG5  : GPIO Input  -  Not Used 
;     Pin /PCIBG4  : GPIO Ouptut -  LED STS   (HIGH=ON)
;     Pin /PCIBG3  : GPIO Output -  LED XFR   (HIGH=ON)
;     Pin /PCIBG2  : GPIO Output -  FPGARst   (HIGH=DSB)
;     Pin /PCIBG1  : GPIO Output -  SW_PFEN2  (HIGH=OFF)   
;     Pin /PCIBG0  : GPIO Output -  SW_PFEN1  (LOW=OFF)

;       Set Output Register 
        move.l   #$1E,d0
        move.b   d0,MCF_GPIO_PODR_PCIBG

;       Set Data Direction 
        move.l   #$1F,d0
        move.b   d0,PDDR_PCIBG
        
;       Set Pin Assignment Register
        ;move.l   #$0200,%d0
        move.l   #$00,d0
        move.w   d0,PAR_PCIBG

; Pin assignments for port PCIBR
;     Pin /PCIBR7 : GPIO Input  -   Not Used 
;     Pin /PCIBR6 : GPIO Input  -   Not Used 
;     Pin /PCIBR5 : GPIO Input  -   Not Used 
;     Pin /PCIBR4 : GPIO Output -   LED Flt      (HIGH=ON)
;     Pin /PCIBR3 : GPIO Output -   LED CFg      (HIGH=ON)
;     Pin /PCIBR2 : GPIO Output -   Arinc429_Pwr (LOW=DSB)
;     Pin /PCIBR1 : GPIO Output -   CAN1 Enb     (LOW=DSB)
;     Pin /PCIBR0 : GPIO Output -   CAN0 Enb     (LOW=DSB)

;       Set Output Register 
        move.l   #$18,d0
        move.b   d0,MCF_GPIO_PODR_PCIBR

;       Set Data Direction 
        move.l   #$1F,d0
        move.b   d0,PDDR_PCIBR
        
;       Set Pin Assignment Register 
        move.l   #$00,d0        
        move.w   d0,PAR_PCIBR
        
; Pin assignments for port PSC3PSC2
;     Pins are all GPIO inputs
;     PSC3PSC2[7]  : GPIO Output   - ACS3_TxEnb     ( OFF = DSB )
;     PSC3PSC2[6]  : GPIO Output   - ACS3_Dx        ( OFF = ??? )
;     PSC3PSC2[5]  : GPIO Input    - Not Used 
;     PSC3PSC2[4]  : GPIO Input    - Not Used 
;     PSC3PSC2[3]  : GPIO Output   - ACS2_TxEnb     ( OFF = DSB )
;     PSC3PSC2[2]  : GPIO Output   - ACS2_Dx        ( OFF = ??? ) 
;     PSC3PSC2[1]  : GPIO Input    - Not Used 
;     PSC3PSC2[0]  : GPIO Input    - Not Used    

;       Set Output Register 
        move.b   #$00,d0
        move.b   d0,MCF_GPIO_PODR_PSC3PSC2

;       Set Data Direction  
        move.b   #$CC,d0
        move.b   d0,PDDR_PSC3PSC2

;       Set Pin Assignment Register 
        move.b   #$00,d0        
        move.b   d0,PAR_PSC3
        move.b   d0,PAR_PSC2

; Pin assignments for port PSC1PSC0
;     Pin /PSC1CTS : GPIO input
;     Pin /PSC0RTS : GPIO input
;     Pin PSC1RXD  : GPIO input
;     Pin PSC1TXD  : GPIO input
;     Pin /PSC0CTS : GPIO output
;     Pin /PSC0RTS : PSC0 request-to-send
;     Pin PSC0RXD  : PSC0 receive-data
;     Pin PSC0TXD  : PSC0 transmit-data

;     PSC3PSC2[7]  : GPIO Output    - ACS1_TxEnb 
;     PSC3PSC2[6]  : GPIO Output    - ACS1_DX 
;     PSC3PSC2[5]  : GPIO Input     - Not Used 
;     PSC3PSC2[4]  : GPIO Input     - Not Used 
;     PSC3PSC2[3]  : GPIO Output    - GSE_TxEnb 
;     PSC3PSC2[2]  : GPIO Output    - Power Hold
;     PSC3PSC2[1]  : GPIO Input     - receive-data (GSE)
;     PSC3PSC2[0]  : GPIO Input     - transmit-data (GSE)

;       Set Output Data
        move.b   #$08,d0
        move.b   d0,MCF_GPIO_PODR_PSC1PSC0

;       Set Data Direction
        move.l   #$CC,d0
        move.b   d0,PDDR_PSC1PSC0
        
;       Set Pin Assignment Register        
        move.l   #$00,d0
        move.b   d0,PAR_PSC1
        move.l   #$0C,d0
        move.b   d0,PAR_PSC0
        
; Pin assignments for port DSPI
;     Pins are all GPIO inputs
        move.l   #$00,d0
        move.b   d0,PDDR_DSPI
        move.w   d0,PAR_DSPI

; Pin assignments for port TIMER
;     Pin TIN3     : GP timer TIN3
;     Pin TOUT3    : GP timer TOUT3
;     Pin TIN2     : GP timer TIN2
;     Pin TOUT2    : GP timer TOUT2
        move.l   #$3f,d0
        move.b   d0,PAR_TIMER

; System PLL Control Register
        move.l  #SPCR_SET,d0
        move.l  d0,SPCR

    jmp pbit

;**********************************************************************


    XDEF    disable_cache
;*********************************************
; init_cache:
;   Disable Cache
;
; Inputs: None
;
; Outputs: None
;
; Modifies:     d0
;*********************************************
disable_cache:
    move.l  d0,-(sp)
    ;move.l  #$01040100,d0
    move.l  #CACHE_DISABLE,d0
    move.l  d0,CACR_SHADOW      ; register settings
    movec   d0,CACR
    move.l  (sp)+,d0
    rts
        

    XDEF    init_cache
;*********************************************
; init_cache:
;   Init Instruction/Branch/Data Cache
;
; Inputs: None
;
; Outputs: None
;
; Modifies:     d0
;*********************************************
init_cache:
.if ENABLE_DATA_CACHE==1
    ; Data Cache enabled (CACR[DEC]=1)
    ;   ACR0: Cache data accesses to 16 MB memory region at address $00000000
    move.l  #$0000c000,d0
    movec   d0,ACR0

    ;   ACR1: Region disabled
    move.l  #$00000000,d0
    movec   d0,ACR1
.endif

    ; CACR: Don't cache data accesses to the rest of memory

    ; Instruction Cache enabled (CACR[IEC]=1)
    ;   ACR2: Cache instruction accesses to 16 MB memory region at address $00000000
    move.l  #__ghs_romend,d0
    tst.l   d0
    beq.s   ic_010
    move.l  #$0000c000,d0       ; program in ROM
    bra.s   ic_020
ic_010:
    move.l  #$3000c000,d0       ; program in RAM
ic_020:
    movec   d0,ACR2

    ;   ACR3: Region disabled
    move.l  #$00000000,d0
    movec   d0,ACR3

    ; CACR: Don't cache instruction accesses to the rest of memory
    ; Branch Cache enabled (CACR[BEC]=1)
    ;move.l #$84088400,d0
    move.l  #CACHE_ENABLE,d0
    move.l  d0,CACR_SHADOW          ; save register settings
    movec   d0,CACR

    rts

    XDEF    PI_FlushInstructionCache
;*********************************************
; PI_FlushInstructionCache:
;   Flush Instruction Cache
;
; Inputs: None
;
; Outputs: None
;
; Uses:     a0,d0,d1
;*********************************************
PI_FlushInstructionCache:
    link    a6,#-16
    movem.l a0/d0-d2,(sp)

    ;check if instruction cache enabled
    move.l  CACR_SHADOW,d0
    and.l   #IEC,d0
    beq.s   PI_FIC_030      ;if not enabled - just exit

.if ENABLE_CACHE_PUSH==1
    move.l  #0,d0           ;initialize way counter
PI_FIC_010:
    move.l  #CACHE_SETS,d1  ;initialize set counter
    move.l  d0,a0           ;set = 0, way = d0

PI_FIC_020:
    cpushl  ic,(a0)         ;push cache line a0
    add.l   #CACHE_SIZE,a0  ;increment set index by 1
    sub.l   #1,d1           ;decrement set counter
    bne     PI_FIC_020
    
    add.l   #1,d0           ;increment to next way
    cmp.l   #CACHE_WAYS,d0  ;flushed all the ways?
    bne     PI_FIC_010
.endif

    ; invalidate instruction cache
    move.l  CACR_SHADOW,d0
    or.l    #ICINVA,d0
    movec   d0,CACR
    
PI_FIC_030:
    movem.l (sp),a0/d0-d2
    unlk    a6
    rts

    XDEF    PI_FlushBranchCache
;*********************************************
; PI_FlushBranchCache:
;   Flush Branch Cache
;
; Inputs: None
;
; Outputs: None
;
; Uses:     a0,d0,d1,d2
;*********************************************
PI_FlushBranchCache:
    link    a6,#-16
    movem.l a0/d0-d2,(sp)

    ;check if branch cache enabled
    move.l  CACR_SHADOW,d0
    and.l   #BEC,d0
    beq.s   PI_FBC_030      ;if not enabled - just exit

.if ENABLE_CACHE_PUSH==1
    move.l  #0,d0           ;initialize way counter
PI_FBC_010:
    move.l  #CACHE_SETS,d1  ;initialize set counter
    move.l  d0,a0           ;set = 0, way = d0

PI_FBC_020:
    cpushl  bc,(a0)         ;push cache line a0
    add.l   #CACHE_SIZE,a0  ;increment set index by 1
    sub.l   #1,d1           ;decrement set counter
    bne     PI_FBC_020
    
    add.l   #1,d0           ;increment to next way
    cmp.l   #CACHE_WAYS,d0  ;flushed all the ways?
    bne     PI_FBC_010
.endif

    ; invalidate Branch cache
    move.l  CACR_SHADOW,d0
    or.l    #BCINVA,d0
    movec   d0,CACR
    
PI_FBC_030:    
    movem.l (sp),a0/d0-d2
    unlk    a6
    rts

    XDEF    PI_FlushCache
;*********************************************
; PI_FlushCache:
;   Flush All Caches
;
; Inputs: None
;
; Outputs: None
;
; Modifies:    None
;*********************************************
PI_FlushCache:
    bsr PI_FlushInstructionCache
    bsr PI_FlushBranchCache
    rts    
    
;*********************************************
;*  MODIFICATIONS
;*     $History: ProcessorInit.s $
;*
;******************  Version 20  *****************
;*User: Contractor2  Date: 8/24/11    Time: 2:45p
;*Updated in $/software/control processor/code/drivers
;*SCR #1061 Requirements: PBIT RAM Test
;*
;******************  Version 19  *****************
;*User: Jim Mood     Date: 7/26/11    Time: 3:47p
;*Updated in $/software/control processor/code/drivers
;*SCR 1022 Support for 512Mbit SDRAM
;*
;******************  Version 17  *****************
;*User: Peter Lee    Date: 8/03/10    Time: 3:20p
;*Updated in $/software/control processor/code/drivers
;*SCR #537 Update for auto VSS header / revision
;*
;*
;*********************************************
